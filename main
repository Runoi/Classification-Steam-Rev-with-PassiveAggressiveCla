{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92b76f78",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:31.179211Z",
     "iopub.status.busy": "2024-12-28T04:09:31.178772Z",
     "iopub.status.idle": "2024-12-28T04:09:32.073023Z",
     "shell.execute_reply": "2024-12-28T04:09:32.071527Z"
    },
    "papermill": {
     "duration": 0.90235,
     "end_time": "2024-12-28T04:09:32.075406",
     "exception": false,
     "start_time": "2024-12-28T04:09:31.173056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/steam-reviews/output_steamspy.csv\n",
      "/kaggle/input/steam-reviews/output.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "import re\n",
    "import string\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2ebcf1db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:32.085595Z",
     "iopub.status.busy": "2024-12-28T04:09:32.085118Z",
     "iopub.status.idle": "2024-12-28T04:09:33.825386Z",
     "shell.execute_reply": "2024-12-28T04:09:33.824192Z"
    },
    "papermill": {
     "duration": 1.747683,
     "end_time": "2024-12-28T04:09:33.827687",
     "exception": false,
     "start_time": "2024-12-28T04:09:32.080004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d62a368b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:33.836759Z",
     "iopub.status.busy": "2024-12-28T04:09:33.836227Z",
     "iopub.status.idle": "2024-12-28T04:09:34.293990Z",
     "shell.execute_reply": "2024-12-28T04:09:34.292796Z"
    },
    "papermill": {
     "duration": 0.464359,
     "end_time": "2024-12-28T04:09:34.296013",
     "exception": false,
     "start_time": "2024-12-28T04:09:33.831654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import PassiveAggressiveClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a8d8ec9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:34.305027Z",
     "iopub.status.busy": "2024-12-28T04:09:34.304550Z",
     "iopub.status.idle": "2024-12-28T04:09:35.512084Z",
     "shell.execute_reply": "2024-12-28T04:09:35.510734Z"
    },
    "papermill": {
     "duration": 1.21396,
     "end_time": "2024-12-28T04:09:35.513921",
     "exception": false,
     "start_time": "2024-12-28T04:09:34.299961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>app_id</th>\n",
       "      <th>content</th>\n",
       "      <th>author_id</th>\n",
       "      <th>is_positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>181331361</td>\n",
       "      <td>100</td>\n",
       "      <td>At least its a counter strike -1/100</td>\n",
       "      <td>76561199556485100</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>180872601</td>\n",
       "      <td>100</td>\n",
       "      <td>Uh... So far my playthrough has not been great...</td>\n",
       "      <td>76561199230620391</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>177836246</td>\n",
       "      <td>100</td>\n",
       "      <td>Better mechanics than cs2</td>\n",
       "      <td>76561198417690647</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>177287444</td>\n",
       "      <td>100</td>\n",
       "      <td>buggy mess and NOT fun to play at all</td>\n",
       "      <td>76561199077268730</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>176678990</td>\n",
       "      <td>100</td>\n",
       "      <td>Whoever came up with this, is gonna fucking ge...</td>\n",
       "      <td>76561199104544266</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          id  app_id                                            content  \\\n",
       "0  181331361     100               At least its a counter strike -1/100   \n",
       "1  180872601     100  Uh... So far my playthrough has not been great...   \n",
       "2  177836246     100                          Better mechanics than cs2   \n",
       "3  177287444     100              buggy mess and NOT fun to play at all   \n",
       "4  176678990     100  Whoever came up with this, is gonna fucking ge...   \n",
       "\n",
       "           author_id is_positive  \n",
       "0  76561199556485100    Negative  \n",
       "1  76561199230620391    Negative  \n",
       "2  76561198417690647    Negative  \n",
       "3  76561199077268730    Negative  \n",
       "4  76561199104544266    Negative  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FILE_PATH = '/kaggle/input/steam-reviews/output.csv'\n",
    "df = pd.read_csv(f'{FILE_PATH}')\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d5a0a5fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:35.523437Z",
     "iopub.status.busy": "2024-12-28T04:09:35.523099Z",
     "iopub.status.idle": "2024-12-28T04:09:35.572551Z",
     "shell.execute_reply": "2024-12-28T04:09:35.571522Z"
    },
    "papermill": {
     "duration": 0.056417,
     "end_time": "2024-12-28T04:09:35.574549",
     "exception": false,
     "start_time": "2024-12-28T04:09:35.518132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(subset=['content'], inplace=True) #Getting rid of NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54cf0a06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:35.584006Z",
     "iopub.status.busy": "2024-12-28T04:09:35.583549Z",
     "iopub.status.idle": "2024-12-28T04:09:35.588069Z",
     "shell.execute_reply": "2024-12-28T04:09:35.587087Z"
    },
    "papermill": {
     "duration": 0.011127,
     "end_time": "2024-12-28T04:09:35.589740",
     "exception": false,
     "start_time": "2024-12-28T04:09:35.578613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "text = df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b465e1e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:35.599243Z",
     "iopub.status.busy": "2024-12-28T04:09:35.598892Z",
     "iopub.status.idle": "2024-12-28T04:09:35.603591Z",
     "shell.execute_reply": "2024-12-28T04:09:35.602501Z"
    },
    "papermill": {
     "duration": 0.011488,
     "end_time": "2024-12-28T04:09:35.605351",
     "exception": false,
     "start_time": "2024-12-28T04:09:35.593863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = df['is_positive']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d81b588c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:35.614427Z",
     "iopub.status.busy": "2024-12-28T04:09:35.614081Z",
     "iopub.status.idle": "2024-12-28T04:09:35.646608Z",
     "shell.execute_reply": "2024-12-28T04:09:35.645590Z"
    },
    "papermill": {
     "duration": 0.039429,
     "end_time": "2024-12-28T04:09:35.648775",
     "exception": false,
     "start_time": "2024-12-28T04:09:35.609346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xtrain, xtest, ytrain, ytest = train_test_split(text,\n",
    "  labels, test_size=0.2,\n",
    "  random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "22048cfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:35.658193Z",
     "iopub.status.busy": "2024-12-28T04:09:35.657816Z",
     "iopub.status.idle": "2024-12-28T04:09:40.403030Z",
     "shell.execute_reply": "2024-12-28T04:09:40.401797Z"
    },
    "papermill": {
     "duration": 4.752314,
     "end_time": "2024-12-28T04:09:40.405094",
     "exception": false,
     "start_time": "2024-12-28T04:09:35.652780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer(stop_words='english',max_features=5000)\n",
    "train = tfidf.fit_transform(xtrain)\n",
    "test = tfidf.transform(xtest)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0ddc106b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:40.414485Z",
     "iopub.status.busy": "2024-12-28T04:09:40.414135Z",
     "iopub.status.idle": "2024-12-28T04:09:41.671872Z",
     "shell.execute_reply": "2024-12-28T04:09:41.670261Z"
    },
    "papermill": {
     "duration": 1.264653,
     "end_time": "2024-12-28T04:09:41.673859",
     "exception": false,
     "start_time": "2024-12-28T04:09:40.409206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Точность Пассивно-агрессивного классификатора: 80.03%\n"
     ]
    }
   ],
   "source": [
    "pac = PassiveAggressiveClassifier(max_iter=1500, loss = 'hinge',early_stopping = True,n_iter_no_change = 10,random_state = 42,verbose = 0)\n",
    "pac.fit(train, ytrain)\n",
    "\n",
    "\n",
    "ypred = pac.predict(test)\n",
    "\n",
    "accuracy = accuracy_score(ytest, ypred)\n",
    "print(f'Точность Пассивно-агрессивного классификатора: {round(accuracy*100,2)}%')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c0e298e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:41.683335Z",
     "iopub.status.busy": "2024-12-28T04:09:41.682983Z",
     "iopub.status.idle": "2024-12-28T04:09:41.688494Z",
     "shell.execute_reply": "2024-12-28T04:09:41.687493Z"
    },
    "papermill": {
     "duration": 0.012225,
     "end_time": "2024-12-28T04:09:41.690263",
     "exception": false,
     "start_time": "2024-12-28T04:09:41.678038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def show_confusion_matrix(confusion):\n",
    "  # Вычисление матрицы ошибок и ее нормализация\n",
    "  plt.figure(figsize=(10,10))\n",
    "\n",
    "  confusion_normalized = confusion / confusion.sum(axis=1, keepdims=True)\n",
    "  axis_labels = range(2)\n",
    "  ax = sns.heatmap(\n",
    "      confusion_normalized, xticklabels=axis_labels, yticklabels=axis_labels,\n",
    "      cmap='Blues', annot=True, fmt='.4f', square=True)\n",
    "  plt.title(\"Матрица ошибок\")\n",
    "  plt.ylabel(\"Истинные метки\")\n",
    "  plt.xlabel(\"Предсказанные метки\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5fc0fd42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:41.699975Z",
     "iopub.status.busy": "2024-12-28T04:09:41.699541Z",
     "iopub.status.idle": "2024-12-28T04:09:42.009689Z",
     "shell.execute_reply": "2024-12-28T04:09:42.008539Z"
    },
    "papermill": {
     "duration": 0.317564,
     "end_time": "2024-12-28T04:09:42.012070",
     "exception": false,
     "start_time": "2024-12-28T04:09:41.694506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[17046  3443]\n",
      " [ 4573 15083]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(ytest, ypred, labels=[\"Positive\", \"Negative\"]))\n",
    "confusion = confusion_matrix(ytest, ypred, labels=[\"Positive\", \"Negative\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dc0064b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:42.022330Z",
     "iopub.status.busy": "2024-12-28T04:09:42.021993Z",
     "iopub.status.idle": "2024-12-28T04:09:42.405313Z",
     "shell.execute_reply": "2024-12-28T04:09:42.404068Z"
    },
    "papermill": {
     "duration": 0.390333,
     "end_time": "2024-12-28T04:09:42.407282",
     "exception": false,
     "start_time": "2024-12-28T04:09:42.016949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_confusion_matrix(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a9135ef1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T04:09:42.418149Z",
     "iopub.status.busy": "2024-12-28T04:09:42.417793Z",
     "iopub.status.idle": "2024-12-28T04:09:42.425015Z",
     "shell.execute_reply": "2024-12-28T04:09:42.423495Z"
    },
    "papermill": {
     "duration": 0.014824,
     "end_time": "2024-12-28T04:09:42.426863",
     "exception": false,
     "start_time": "2024-12-28T04:09:42.412039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Negative\n",
      "Positive\n"
     ]
    }
   ],
   "source": [
    "# Example Prediction\n",
    "sample_reviews = [\"I didn't like the game\", \n",
    "                  \"A short but fun addition to the half-life universe.\"]\n",
    "sample_vec = tfidf.transform(sample_reviews)\n",
    "sample_pred = pac.predict(sample_vec)\n",
    "\n",
    "for pred in sample_pred:\n",
    "    print(pred)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6274749,
     "sourceId": 10216764,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14.979031,
   "end_time": "2024-12-28T04:09:43.254873",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-28T04:09:28.275842",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
